language: tr
title: Vue2 Notlarim
tags: notes
slug: vue2-notlarim
date: 2020-02-29T09:11:59.816Z
content: >-
  Vue nun yaptigi is reactive templating isidir. Progressive Web Application lar
  icin kullanilir.


  ### Extend


  Extend kullanarak componentlerde inheritince kullanilabilir. https://vuejs.org/v2/api/#extends


  ```js

  var CompA = { ... }


  // extend CompA without having to call `Vue.extend` on either

  var CompB = {
    extends: CompA,
    ...
  }

  ```


  ### nextTick


  Bazen bir islemi dom yenilendikten sonra yapmak gerekir bunun icin nextTick kullanilir.


  ```js

  export default {
    //...
    methods: {
      test: function () {
          this.nextTick(()=>{
            // dom operation or any
          });
      }
    }
  }

  ```


  ### Observable / set / delete


  Vue nun reactive elemanlarini set ederken veya delete ederken kullanilir. Reactivity detection icin onemlidir. Vue da bazen degisimler algilanmaz. Bu fonksiyonlari direk olarak kullanmak sorunu cozebilir.


  ```js
    const REACTIVE_ELEMAN = Vue.observable({foo:'bar'})
    Vue.set( REACTIVE_ELEMAN, KEY, VALUE )
    Vue.delete( REACTIVE_ELEMAN, KEY )
  ```


  ### Directive


  Vue nun en onemli parcalarindan biridir, directive kullanarak html elemanina reactivity kazandirilabilir veya directive attributelari eklenerek html elemanlarina ek feature lar kazandirilabilir.


  ```js
    // global register
    Vue.directive('my-directive', {
      bind: function () {},
      inserted: function () {},
      update: function () {},
      componentUpdated: function () {},
      unbind: function () {}
    })

    // component icinde register

    export default {
      //...
      directives: {
        "my-directive": {
          bind: function () {},
          inserted: function () {},
          update: function () {},
          componentUpdated: function () {},
          unbind: function () {}
        }
      }
    }
  ```


  ### Filter


  Linux bash deki pipe mantigina benzer sekilde calisir. Bir onceki elamanin cikitisi pipe sonrasi yazilan filtreye yonlendirilir. **Vue3 de kaldirildi!**


  ```js
    <template>
      <div>{{ message | capitalize }}</div>
    </template>

    filters: {
      capitalize: function (value) {
        // return capitalized value
      }
    }
  ```


  ### Render function, createElement, Recursive component


  .vue dosyalarindan otomatik olarak olusan structurelari. createElement kullanarak da yapilabilir. Genelde recursive componentlerde veya json bazli islemlerde componentleri olusturmak icin kullanilir.

  https://vuejs.org/v2/guide/render-function.html#The-Data-Object-In-Depth


  ```js

  createElement('h1', "text" || {
      // ozellikler
    },
    [...children]
  )

  ```


  ### Options / Data


  ```js

  // Vuenun componentinin build edilmemis ham hali.

  this.$options


  // Reactive degiskenlerin tanimlandigi alan. (Observable)

  data;


  // Componentden tanimindan alinacak olan attribute=value lar

  props;


  /* Componenti kullanirken verilen prop valuelari.
   (Nadir kullanilir. component new ile tanimlanir
  */

  propsData;


  /*
    normal fonksiyon veya. Get, set tanimli fonksiyon verilebilir.
    Genel olarak Observable olan degiskenler burada reduce edilir.
    not: Burada data degistirmek side-effect olusturur dolayisyila izin verilmez
  */

  observable;


  /*
    Observable tipindeki degiskenlerin degisimleri burada takip edilebilir.
    Degisken adini veya a.b.c seklinde obje icindeki path i verilebilir.
    immediate gibi ek ozelligi vardir 
    component created oldugunda degisim aranmadan
    call edilebilir.
  */

  watch;


  /*
    Component ve templete icinde kullanilacak fonksiyonlar tanimlanir.
  */

  methods;

  ```
author: Davut KARA
